const http = require('http');
const fs = require('fs');
const { createRequestCacher } = require('./server-cache');
const { getFirstExternalAddress } = require('../util/easy-os')

/**
 * 
 * @typedef {{
 * data: string;
 * cached: boolean;
 * }} ResponseData
 */

/**
 * 
 * @param {http.RequestListener} requestListener
 */
function createServer(requestListener) {
    const requestCacher = createRequestCacher();
    const server = http.createServer(requestListener ?? ((req, res) => {
        if (req.url === '/') {
            interface.sendData('/index.html', res);
        } else {
            interface.sendData(req.url, res);
        }
    }));

    let __rootDir = './';
    let __hostname = getFirstExternalAddress();

    const interface = {
        /**
         * 
         * @param {(port: number, hostname: string) => void} onStart
         * @param {number} port 
         * @param {string} hostname
         */
        start(onStart=() => {}, port=80, hostname=__hostname) {
            server.listen(port, hostname, () => onStart(port, hostname));
        },

        /**
         * 
         * @param {string} newDir 
         */
        setRootDir(newDir) {
            __rootDir = newDir;
        },

        /**
         * 
         * @param {string} path 
         * @param {http.ServerResponse} res
         */
        sendData(path, res) {
            this.getData(path)
            .then(({data, cached}) => {
                res.writeHead(cached? 300: 200, {'Content-type': 'text/html'});
                res.write(data);
            })
            .catch(
            /**
             * 
             * @param {NodeJS.ErrnoException} reason
             */
            reason => {
                console.log(reason);
                res.writeHead(404, {'Content-type': 'text/html'});
                res.write(`Error: ${reason.message}`)
            })
            .finally(() => {
                res.end();
            });
        }, 
        
        /**
         * 
         * @param {string} path 
         * @returns {Promise<ResponseData>}
         */
        getData(path) {
            return new Promise((resolve, reject) => {
                let cachedData = requestCacher.getDataFrom(__rootDir + path);

                if (cachedData) {
                    resolve({
                        data: cachedData,
                        cached: true
                    });
                } else {
                    fs.readFile(__rootDir + path, {encoding: 'utf-8'}, (err, data) => {
                        if (err) reject(err);

                        requestCacher.insert(data, __rootDir + path);

                        resolve({
                            data,
                            cached: false
                        });
                    });
                }
            });
        }
    };

    return interface;
};

module.exports = { createServer };