const http = require('http');
const fs = require('fs');
const serverCache = require('./server-cache');
const easyOs = require('../util/easy-os')


/**@type {import('.').ModuleExportsI} */
const exportsInterface = {
    createServer(requestListener) {
        const requestCacher = serverCache.createRequestCacher();
        const server = http.createServer(requestListener ?? ((req, res) => {
            if (req.method === 'GET') {
                if (req.url === '/') {
                    interface.sendData('/index.html', res);
                } else {
                    interface.sendData(req.url, res);
                }
            }
        }));

        const requestListeners = {
            get: [],
            post: [],
            delete: [],
        };

        let __rootDir = './';
        let __hostname = easyOs.getFirstExternalAddress();

        server.on('request', (req, res) => {
            console.log('url: %s', req.url);
        });

        function addRequestListener(method, listener) {

        };

        /**@type {import('./').ServerI} */
        const interface = {
            start(onStart=() => {}, port=80, hostname=__hostname) {
                server.listen(port, hostname, () => onStart(port, hostname));
            },
    
            setRootDir(newDir) {
                __rootDir = newDir;
            },

            sendData(path, res) {
                this.getData(path)
                .then(({data, cached}) => {
                    res.writeHead(cached? 200: 200, {'Content-type': 'text/html'});
                    res.write(data);
                })
                .catch(
                /**
                 * 
                 * @param {NodeJS.ErrnoException} reason
                 */
                reason => {
                    console.log(reason);
                    res.writeHead(404, {'Content-type': 'text/html'});
                    res.write(`Error: ${reason.message}`)
                })
                .finally(() => {
                    res.end();
                });
            }, 
            
            getData(path) {
                return new Promise((resolve, reject) => {
                    let cachedData = requestCacher.getDataFrom(__rootDir + path);

                    if (cachedData) {
                        resolve({
                            data: cachedData,
                            cached: true
                        });
                    } else {
                        fs.readFile(__rootDir + path, {encoding: 'utf-8'}, (err, data) => {
                            if (err) reject(err);

                            requestCacher.insert(data, __rootDir + path);

                            resolve({
                                data,
                                cached: false
                            });
                        });
                    }
                });
            },

            listen: {
                get() {
                
                },

                post() {

                },

                update() {

                },

                delete() {

                }
            },
        };

        return interface;
    }
}

module.exports = exportsInterface;