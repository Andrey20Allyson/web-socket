class RequestCache {
    data;
    path;

    /**
     * 
     * @param {string} data 
     * @param {string} path 
     */
    constructor(data, path) {
        this.data = data;
        this.path = path;
    }
}

function createRequestCacher() {
    /**@type {RequestCache[]} */
    const caches = [];
    let maxLen = 8;

    return {
        /**
         * 
         * @param {string} path 
         */
        getDataFrom(path) {
            return caches.find(v => v.path === path)?.data;
        },

        /**
         * 
         * @param {string} data 
         * @param {string} path 
         */
        insert(data, path) {
            if (caches.length >= maxLen) caches.shift();
            caches.push(new RequestCache(data, path));
        },

        /**
         * 
         * @param {number} newLen 
         */
        setMaxLen(newLen) {
            if (newLen < 0) throw new Error('newLen must be positive!');

            if (newLen < maxLen) 
                caches.splice(0, maxLen - newLen);

            maxLen = newLen;
        }
    };
}

module.exports = { createRequestCacher };